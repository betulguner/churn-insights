#!/usr/bin/env python3
"""
Tableau Data Export Script
==========================
Bu script, BI dashboard'larƒ± i√ßin gerekli verileri CSV formatƒ±nda export eder.
Tableau ve PowerBI i√ßin optimize edilmi≈ü veri setleri olu≈üturur.
"""

import pandas as pd
import numpy as np
import os
import sys
from datetime import datetime
from sqlalchemy import create_engine
from dotenv import load_dotenv

# Environment variables y√ºkle
load_dotenv()

class TableauDataExporter:
    def __init__(self):
        """Tableau veri export sƒ±nƒ±fƒ±"""
        self.db_config = self._get_db_config()
        self.engine = self._create_engine()
        self.export_dir = "tableau_exports"
        self._create_export_directory()
    
    def _get_db_config(self):
        """Veritabanƒ± konfig√ºrasyonu"""
        return {
            'host': os.getenv('POSTGRES_HOST', 'localhost'),
            'port': os.getenv('POSTGRES_PORT', '5433'),
            'database': os.getenv('POSTGRES_DB', 'churn_analysis'),
            'user': os.getenv('POSTGRES_USER', 'churn_user'),
            'password': os.getenv('POSTGRES_PASSWORD', 'churn_password'),
        }
    
    def _create_engine(self):
        """SQLAlchemy engine olu≈ütur"""
        connection_string = (
            f"postgresql://{self.db_config['user']}:{self.db_config['password']}"
            f"@{self.db_config['host']}:{self.db_config['port']}/{self.db_config['database']}"
        )
        return create_engine(connection_string)
    
    def _create_export_directory(self):
        """Export dizini olu≈ütur"""
        if not os.path.exists(self.export_dir):
            os.makedirs(self.export_dir)
            print(f"üìÅ Export dizini olu≈üturuldu: {self.export_dir}")
    
    def export_customer_complete_view(self):
        """M√º≈üteri tam g√∂r√ºn√ºm√º export et"""
        print("üìä Customer Complete View export ediliyor...")
        
        query = """
        SELECT 
            customer_id,
            gender,
            senior_citizen,
            partner,
            dependents,
            phone_service,
            multiple_lines,
            internet_service,
            online_security,
            online_backup,
            device_protection,
            tech_support,
            streaming_tv,
            streaming_movies,
            contract_type,
            paperless_billing,
            payment_method,
            monthly_charges,
            total_charges,
            tenure_months,
            churn_status,
            churn_date,
            risk_score,
            segment_name,
            cltv_score
        FROM customer_complete_view
        ORDER BY customer_id;
        """
        
        df = pd.read_sql(query, self.engine)
        
        # Tableau i√ßin optimize et
        df['churn_status_label'] = df['churn_status'].map({True: 'Churned', False: 'Active'})
        df['senior_citizen_label'] = df['senior_citizen'].map({True: 'Senior', False: 'Non-Senior'})
        df['partner_label'] = df['partner'].map({True: 'Has Partner', False: 'Single'})
        df['dependents_label'] = df['dependents'].map({True: 'Has Dependents', False: 'No Dependents'})
        
        # Export et
        file_path = os.path.join(self.export_dir, 'customer_complete_data.csv')
        df.to_csv(file_path, index=False)
        print(f"‚úÖ Customer Complete View exported: {file_path}")
        print(f"   üìà Records: {len(df):,}")
        
        return df
    
    def export_churn_analysis_summary(self):
        """Churn analiz √∂zeti export et"""
        print("üìä Churn Analysis Summary export ediliyor...")
        
        query = """
        SELECT 
            contract_type,
            internet_service,
            payment_method,
            total_customers,
            churned_customers,
            churn_rate,
            avg_monthly_charges,
            avg_tenure_months
        FROM churn_analysis_view
        ORDER BY churn_rate DESC;
        """
        
        df = pd.read_sql(query, self.engine)
        
        # Export et
        file_path = os.path.join(self.export_dir, 'churn_analysis_summary.csv')
        df.to_csv(file_path, index=False)
        print(f"‚úÖ Churn Analysis Summary exported: {file_path}")
        print(f"   üìà Records: {len(df):,}")
        
        return df
    
    def export_cltv_analysis_summary(self):
        """CLTV analiz √∂zeti export et"""
        print("üìä CLTV Analysis Summary export ediliyor...")
        
        query = """
        SELECT 
            segment_name,
            contract_type,
            payment_method,
            internet_service,
            segment_name,
            COUNT(*) as customer_count,
            ROUND(AVG(cltv_score), 2) as avg_cltv,
            ROUND(AVG(monthly_charges), 2) as avg_monthly_charges,
            ROUND(AVG(total_charges), 2) as avg_total_charges,
            ROUND(AVG(tenure_months), 1) as avg_tenure,
            SUM(CASE WHEN churn_status = true THEN 1 ELSE 0 END) as churned_count,
            ROUND(AVG(CASE WHEN churn_status = true THEN 1.0 ELSE 0.0 END) * 100, 2) as churn_rate
        FROM customer_complete_view
        GROUP BY segment_name, contract_type, payment_method, internet_service
        ORDER BY avg_cltv DESC;
        """
        
        df = pd.read_sql(query, self.engine)
        
        # Export et
        file_path = os.path.join(self.export_dir, 'cltv_analysis_summary.csv')
        df.to_csv(file_path, index=False)
        print(f"‚úÖ CLTV Analysis Summary exported: {file_path}")
        print(f"   üìà Records: {len(df):,}")
        
        return df
    
    def export_segment_analysis_summary(self):
        """Segment analiz √∂zeti export et"""
        print("üìä Segment Analysis Summary export ediliyor...")
        
        query = """
        SELECT 
            segment_name,
            COUNT(*) as customer_count,
            ROUND(AVG(cltv_score), 2) as avg_cltv,
            ROUND(AVG(monthly_charges), 2) as avg_monthly_charges,
            ROUND(AVG(total_charges), 2) as avg_total_charges,
            ROUND(AVG(tenure_months), 1) as avg_tenure,
            SUM(CASE WHEN churn_status = true THEN 1 ELSE 0 END) as churned_count,
            ROUND(AVG(CASE WHEN churn_status = true THEN 1.0 ELSE 0.0 END) * 100, 2) as churn_rate,
            ROUND(AVG(risk_score), 2) as avg_risk_score
        FROM customer_complete_view
        GROUP BY segment_name
        ORDER BY avg_cltv DESC;
        """
        
        df = pd.read_sql(query, self.engine)
        
        # Export et
        file_path = os.path.join(self.export_dir, 'segment_analysis_summary.csv')
        df.to_csv(file_path, index=False)
        print(f"‚úÖ Segment Analysis Summary exported: {file_path}")
        print(f"   üìà Records: {len(df):,}")
        
        return df
    
    def export_ml_predictions_summary(self):
        """ML tahmin √∂zeti export et"""
        print("üìä ML Predictions Summary export ediliyor...")
        
        query = """
        SELECT 
            COUNT(*) as total_predictions,
            COUNT(CASE WHEN "RandomForest_prediction" IS NOT NULL THEN 1 END) as randomforest_predictions,
            COUNT(CASE WHEN "XGBoost_prediction" IS NOT NULL THEN 1 END) as xgboost_predictions,
            ROUND(AVG("RandomForest_probability")::numeric, 4) as avg_rf_confidence,
            ROUND(AVG("XGBoost_probability")::numeric, 4) as avg_xgb_confidence,
            ROUND(AVG("best_probability")::numeric, 4) as avg_best_confidence,
            COUNT(CASE WHEN churn_status = "RandomForest_prediction" THEN 1 END) as rf_correct,
            COUNT(CASE WHEN churn_status = "XGBoost_prediction" THEN 1 END) as xgb_correct,
            COUNT(CASE WHEN churn_status = "best_prediction" THEN 1 END) as best_correct
        FROM ml_predictions
        WHERE "RandomForest_prediction" IS NOT NULL OR "XGBoost_prediction" IS NOT NULL;
        """
        
        df = pd.read_sql(query, self.engine)
        
        # Export et
        file_path = os.path.join(self.export_dir, 'ml_predictions_summary.csv')
        df.to_csv(file_path, index=False)
        print(f"‚úÖ ML Predictions Summary exported: {file_path}")
        print(f"   üìà Records: {len(df):,}")
        
        return df
    
    def export_time_series_data(self):
        """Zaman serisi verisi export et (simulated)"""
        print("üìä Time Series Data export ediliyor...")
        
        # Simulated time series data for trends
        dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='M')
        
        time_series_data = []
        for date in dates:
            # Simulated monthly metrics
            monthly_data = {
                'month': date.strftime('%Y-%m'),
                'year': date.year,
                'month_name': date.strftime('%B'),
                'quarter': f"Q{(date.month-1)//3 + 1}",
                'total_customers': np.random.randint(7000, 7500),
                'churned_customers': np.random.randint(300, 500),
                'churn_rate': np.random.uniform(4.5, 6.5),
                'avg_cltv': np.random.uniform(3500, 4200),
                'avg_monthly_charges': np.random.uniform(65, 75),
                'new_customers': np.random.randint(200, 400)
            }
            time_series_data.append(monthly_data)
        
        df = pd.DataFrame(time_series_data)
        
        # Export et
        file_path = os.path.join(self.export_dir, 'time_series_data.csv')
        df.to_csv(file_path, index=False)
        print(f"‚úÖ Time Series Data exported: {file_path}")
        print(f"   üìà Records: {len(df):,}")
        
        return df
    
    def create_tableau_workbook_instructions(self):
        """Tableau workbook talimatlarƒ± olu≈ütur"""
        instructions = """
# Tableau Dashboard Talimatlarƒ±
================================

## üìä Dashboard Sayfalarƒ±

### 1. Genel M√º≈üteri Daƒüƒ±lƒ±mƒ± Dashboard
- **Veri Kaynaƒüƒ±**: customer_complete_data.csv
- **Grafikler**:
  - M√º≈üteri daƒüƒ±lƒ±mƒ± (Pie Chart): churn_status_label
  - Demografik daƒüƒ±lƒ±m (Bar Chart): gender, senior_citizen_label
  - Hizmet daƒüƒ±lƒ±mƒ± (Stacked Bar): internet_service, phone_service
  - √ñdeme y√∂ntemi daƒüƒ±lƒ±mƒ± (Donut Chart): payment_method
  - S√∂zle≈üme t√ºr√º daƒüƒ±lƒ±mƒ± (Bar Chart): contract_type

### 2. Churn Trendleri Dashboard
- **Veri Kaynaƒüƒ±**: churn_analysis_summary.csv, time_series_data.csv
- **Grafikler**:
  - Churn oranƒ± trendi (Line Chart): time_series_data
  - Churn oranƒ± by segment (Bar Chart): churn_analysis_summary
  - Risk seviyesi vs Churn (Scatter Plot): churn_analysis_summary
  - Tenure vs Churn (Area Chart): churn_analysis_summary
  - Aylƒ±k √ºcret vs Churn (Scatter Plot): churn_analysis_summary

### 3. CLTV Analizi Dashboard
- **Veri Kaynaƒüƒ±**: cltv_analysis_summary.csv
- **Grafikler**:
  - CLTV daƒüƒ±lƒ±mƒ± (Histogram): avg_cltv
  - Segment CLTV kar≈üƒ±la≈ütƒ±rmasƒ± (Bar Chart): segment_name vs avg_cltv
  - CLTV vs Churn Rate (Scatter Plot): cltv_analysis_summary
  - √ñdeme y√∂ntemi vs CLTV (Box Plot): payment_method vs avg_cltv
  - S√∂zle≈üme t√ºr√º vs CLTV (Box Plot): contract_type vs avg_cltv

### 4. Segment Performans Dashboard
- **Veri Kaynaƒüƒ±**: segment_analysis_summary.csv
- **Grafikler**:
  - Segment daƒüƒ±lƒ±mƒ± (Treemap): segment_name vs customer_count
  - Segment CLTV kar≈üƒ±la≈ütƒ±rmasƒ± (Bar Chart): segment_name vs avg_cltv
  - Segment Churn Rate (Bar Chart): segment_name vs churn_rate
  - Segment Risk Score (Bar Chart): segment_name vs avg_risk_score
  - Segment √ñzet Tablosu (Table): T√ºm metrikler

## üé® Dashboard Tasarƒ±m √ñnerileri

### Renk Paleti:
- **Primary**: #1f77b4 (Mavi)
- **Secondary**: #ff7f0e (Turuncu)
- **Success**: #2ca02c (Ye≈üil)
- **Warning**: #d62728 (Kƒ±rmƒ±zƒ±)
- **Info**: #9467bd (Mor)

### Layout:
- **Header**: Dashboard ba≈ülƒ±ƒüƒ± ve filtreler
- **Main Area**: Ana grafikler (2x2 veya 3x2 grid)
- **Sidebar**: Filtreler ve drill-down se√ßenekleri
- **Footer**: Son g√ºncelleme tarihi ve veri kaynaƒüƒ±

## üìà KPI Metrikleri:
1. **Toplam M√º≈üteri Sayƒ±sƒ±**
2. **Genel Churn Oranƒ±**
3. **Ortalama CLTV**
4. **Ortalama M√º≈üteri Ya≈üƒ± (Tenure)**
5. **Risk Skoru Trendi**

## üîç Filtreler:
- **Zaman Aralƒ±ƒüƒ±**: Son 12 ay
- **Segment**: T√ºm segmentler
- **Churn Status**: Active/Churned
- **Contract Type**: Month-to-month/One year/Two year
- **Internet Service**: DSL/Fiber optic/No

## üì± Responsive Tasarƒ±m:
- Desktop: 1920x1080
- Tablet: 1024x768
- Mobile: 768x1024

## üöÄ Yayƒ±nlama:
1. Tableau Public'e upload et
2. Public link olu≈ütur
3. Embed kodlarƒ± al
4. README.md'ye link ekle
        """
        
        file_path = os.path.join(self.export_dir, 'tableau_dashboard_instructions.md')
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(instructions)
        print(f"‚úÖ Tableau instructions created: {file_path}")
    
    def run_all_exports(self):
        """T√ºm export i≈ülemlerini √ßalƒ±≈ütƒ±r"""
        print("üöÄ Tableau Data Export ba≈ülatƒ±lƒ±yor...")
        print("=" * 50)
        
        try:
            # Ana veri setlerini export et
            self.export_customer_complete_view()
            self.export_churn_analysis_summary()
            self.export_cltv_analysis_summary()
            self.export_segment_analysis_summary()
            self.export_ml_predictions_summary()
            self.export_time_series_data()
            
            # Tableau talimatlarƒ± olu≈ütur
            self.create_tableau_workbook_instructions()
            
            print("=" * 50)
            print("‚úÖ T√ºm export i≈ülemleri tamamlandƒ±!")
            print(f"üìÅ Export dosyalarƒ±: {os.path.abspath(self.export_dir)}")
            
            # Export edilen dosyalarƒ± listele
            print("\nüìã Export edilen dosyalar:")
            for file in os.listdir(self.export_dir):
                if file.endswith('.csv'):
                    file_path = os.path.join(self.export_dir, file)
                    file_size = os.path.getsize(file_path)
                    print(f"   üìÑ {file} ({file_size:,} bytes)")
            
            print(f"\nüìÑ {len(os.listdir(self.export_dir))} dosya ba≈üarƒ±yla export edildi!")
            
        except Exception as e:
            print(f"‚ùå Export i≈ülemi ba≈üarƒ±sƒ±z: {e}")
            raise

def main():
    """Ana fonksiyon"""
    print("üéØ Tableau Data Export Tool")
    print("=" * 50)
    
    try:
        exporter = TableauDataExporter()
        exporter.run_all_exports()
        
        print("\nüéâ Tableau i√ßin veri hazƒ±rlƒ±ƒüƒ± tamamlandƒ±!")
        print("üìä ≈ûimdi Tableau Public'e giri≈ü yapabilir ve dashboard'larƒ± olu≈üturabilirsin!")
        
    except Exception as e:
        print(f"‚ùå Hata: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
